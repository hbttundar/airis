# For more information: https://laravel.com/docs/airis
version: "3"
services:
  ## web service ############################################################################################################################
  web:
    build:
      context: ./docker/web
      args:
        WWWGROUP: "${WWWGROUP}"
        WWWUSER: "${WWWUSER}"
        PHP_VERSION: "${PHP_VERSION}"
        INSTALL_XDEBUG: "${INSTALL_XDEBUG}"
        DEFAULT_WEB_SERVER: "${DEFAULT_WEB_SERVER}"
        APP_ENV: "${APP_ENV}"
    networks:
      - airis
    volumes:
      - "./:/var/www/html"
      - "./storage/:/var/www/html/storage:rw"
      - "${PHP_LOCAL_CONFIG}:/etc/php/${PHP_VERSION}/${PHP_CONFIG_FOLDER}/conf.d/override_php.ini"
      - "${MSMTP_LOCAL_CONFIG}:/etc/msmtprc"
    depends_on:
      - db
      - redis
      - selenium
      - proxy
    links:
      - proxy:www.airis.de.localhost
      - proxy:www.airis.localhost
    container_name: ${WEB_CONTAINER_NAME}
  ### proxy ############################################################################################################
  proxy:
    build:
      context: ./docker/proxy
      args:
        DEFAULT_WEB_SERVER: "${DEFAULT_WEB_SERVER}"
    ports:
      - '80:80'
      - '443:443'
    networks:
      - airis
    container_name: ${PROXY_CONTAINER_NAME}
  ### hostmachine ######################################################################################################
  hostmachine:
    image: qoomon/docker-host
    cap_add: [ 'NET_ADMIN', 'NET_RAW' ]
    deploy:
      resources:
        limits:
          memory: 8M
    restart: on-failure
    networks:
      - airis
    container_name: ${HOSTMACHINE_CONTAINER_NAME}
  ### composer #########################################################################################################
  composer:
    build:
      context: ./docker/composer/
    working_dir: /var/www/html/
    volumes:
      - "./:/var/www/html/"
    command: [ "install", "--ignore-platform-reqs" ]
    user: "${WWWUSER}"
    networks:
      - airis
    container_name: ${COMPOSER_CONTAINER_NAME}
  ## mysql service ##########################################################################################################################
  db:
    image: "${DB_IMAGE}:${DB_VERSION}"
    restart: 'always'
    ports:
       - "${FORWARD_DB_PORT:-3306}:3306"
    environment:
       MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
       MYSQL_DATABASE: "${DB_DATABASE}"
       MYSQL_USER: "${DB_USERNAME}"
       MYSQL_PASSWORD: "${DB_PASSWORD}"
       MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    volumes:
       - "airis_db:/var/lib/mysql"
    healthcheck:
       test: [ "CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}" ]
       retries: 3
       timeout: 5s
    networks:
       - airis
    container_name: ${DB_CONTAINER_NAME}
  ## redis service ##########################################################################################################################
  redis:
    image: "redis:alpine"
    ports:
      - "${FORWARD_REDIS_PORT:-6379}:6379"
    volumes:
      - "airis_redis:/data"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      retries: 3
      timeout: 5s
    networks:
      - airis
    container_name: ${REDIS_CONTAINER_NAME}
  ## meilisearch service ####################################################################################################################
  meilisearch:
    build:
      context: ./docker/meilisearch
      args:
        FORWARD_MEILISEARCH_PORT: "${FORWARD_MEILISEARCH_PORT}"
    volumes:
      - "airis_meilisearch:/data.ms"
    networks:
      - airis
    container_name: ${MEILISERACH_CONTAINER_NAME}
  ## mailhog service ########################################################################################################################
  mailhog:
    image: "mailhog/mailhog:latest"
    ports:
      - "${FORWARD_MAILHOG_PORT:-1025}:1025"
      - "${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025"
    networks:
      - airis
    container_name: ${MAIL_SERVICE_CONTAINER_NAME}
  ## selenium service ########################################################################################################################
  selenium:
    image: "selenium/standalone-chrome"
    volumes:
      - "/dev/shm:/dev/shm"
    networks:
      - airis
    container_name: ${SELENIUM_CONTAINER_NAME}
  ### mongo ############################################################################################################
  mongo:
    image: mongo:4.2
    networks:
      - airis
    container_name: ${MONOGO_CONTAINER_NAME}
  ###ElasticSearch #####################################################################################################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
    networks:
      - airis
    container_name: ${ELASTICSEARCH_CONTAINER_NAME}
  ### graylog ############################################################################################################
  graylog:
    image: graylog/graylog:4.1
    volumes:
      - "airis_graylog:/usr/share/graylog/data/journal"
      - "./docker/graylog/config/:/usr/share/graylog/data/config"
    environment:
      # CHANGE ME (must be at least 16 characters)!
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      # Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:7000/
      - GRAYLOG_ELASTICSEARCH_VERSION=7
    links:
      - proxy:www.graylog.localhost
    depends_on:
      - mongo
      - elasticsearch
    networks:
      - airis
    ports:
      # Graylog web interface and REST API
      - 7000:9000
      # GELF http
      - 12201:12201
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 5555:5555
      # GELF UDP
      - 12201:12201/udp
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    restart: always
    container_name: ${GRAYLOG_CONTAINER_NAME}
  ### portainer ########################################################################################################
  portainer:
    image: portainer/portainer
    volumes:
      - "airis_portainer:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"
    links:
      - proxy:www.portainer.localhost
    networks:
      - airis
    deploy:
      placement:
        constraints: [ node.role == manager ]
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1"
    ports:
      - "9999:9000"
    container_name: ${PORTAINER_CONTAINER_NAME}
################################################################################################################################    
networks:
  airis:
    driver: bridge
volumes:
  airis_db:
    driver: local
  airis_redis:
    driver: local
  airis_meilisearch:
    driver: local
  mongo:
    driver: local
  elasticsearch:
    driver: local
  airis_graylog:
    driver: local
  airis_portainer:
      driver: local  